Work Report on Introduction to C# [08/02/2021]

• Today, I revised all the videos of the introduction to C# videos.
• And doing practical implementation on some topics
	• Created ATM console Appliction and Remove some bugs in that
	• Performing code optimaztion on ATM console application 
	• Handle Errors
	• In that using class, property, abstract class, abstract methods, inheritance 
	
	• Create Queue web Application
	• In that perform code optimazation on that practical
	• Using that I used onject property on button_click and cast that object into button
	• All 3 buttons are work on button_click single event and handle various clicks.

• Also read some other resources on W3School, C# corner.

• Code of Queue Optimazation [Below code is my work on Queue Example]

namespace QueueDemo
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (Session["tokenQueue"] == null)
                {
                    Queue<int> queueToken = new Queue<int>();
                    Session["tokenQueue"] = queueToken;
                }
                else
                {
                    Queue<int> tokenQueue = (Queue<int>)Session["tokenQueue"];
                    //lblStatus.Text = "There are " + tokenQueue.Count + " customers before you";
                    //listNames.Items.Clear();
                    //foreach (int token in tokenQueue)
                    //{
                    //    listNames.Items.Add(token.ToString());
                    //}
                    checkCustomer();
                }
            }
        }

        protected void btnPrintToken_Click(object sender, EventArgs e)
        {
            Queue<int> tokenQueue = (Queue<int>)Session["tokenQueue"];
            lblStatus.Text = "There are " + tokenQueue.Count + " customers before you in the queue";
            if(Session["lastToken"] == null)
            {
                Session["lastToken"] = 0;
            }
            int nextNumber = (int)Session["lastToken"] + 1;
            Session["lastToken"] = nextNumber;
            tokenQueue.Enqueue(nextNumber);
            listNames.Items.Clear();
            foreach (int token in tokenQueue)
            {
                listNames.Items.Add(token.ToString());
            }
        }

        protected void btnNext_Click(object sender, EventArgs e)
        {
            Button btnName = (Button)sender;
            if (btnName.ID == "btnNext1")
            {
                moveToCounter(txtCounter1, 1);
            }
            else if (btnName.ID == "btnNext2")
            {
                moveToCounter(txtCounter2, 2);
            }
            else
            {
                moveToCounter(txtCounter3, 3);
            }
        }

        private void moveToCounter(TextBox textBox, int counter)
        {
            Queue<int> tokenQueue = (Queue<int>)Session["tokenQueue"];
            if (tokenQueue.Count == 0)
            {
                txtMessage.Text = "There are no coustomer in Queue";
                textBox.Text = "No Customer";
            }
            else
            {
                int dequeu = tokenQueue.Dequeue();
                txtMessage.Text = "Customer " + dequeu + " go to Counter no." + counter;
                textBox.Text = dequeu.ToString();
                checkCustomer();
            }
        }

        private void checkCustomer()
        {
            Queue<int> tokenQueue = (Queue<int>)Session["tokenQueue"];
            listNames.Items.Clear();
            foreach (int token in tokenQueue)
            {
                listNames.Items.Add(token.ToString());
            }
            if ((tokenQueue.Count - 1) == -1)
            {
                lblStatus.Text = "There are no customers before you in the queue";
            }
            else
            {
                lblStatus.Text = "There are " + (tokenQueue.Count - 1).ToString() + " customers before you in the queue";
            }
        }
    }
}